// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -mock_names=Service=MockAPIKeyService -destination=../../mock/mock_apikey_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-fiber-api/internal/core/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAPIKeyService is a mock of Service interface.
type MockAPIKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyServiceMockRecorder
	isgomock struct{}
}

// MockAPIKeyServiceMockRecorder is the mock recorder for MockAPIKeyService.
type MockAPIKeyServiceMockRecorder struct {
	mock *MockAPIKeyService
}

// NewMockAPIKeyService creates a new mock instance.
func NewMockAPIKeyService(ctrl *gomock.Controller) *MockAPIKeyService {
	mock := &MockAPIKeyService{ctrl: ctrl}
	mock.recorder = &MockAPIKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyService) EXPECT() *MockAPIKeyServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAPIKeyService) Create(ctx context.Context, dto *model.APIKeyDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAPIKeyServiceMockRecorder) Create(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPIKeyService)(nil).Create), ctx, dto)
}

// DeleteByID mocks base method.
func (m *MockAPIKeyService) DeleteByID(ctx context.Context, id any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockAPIKeyServiceMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockAPIKeyService)(nil).DeleteByID), ctx, id)
}

// FindAll mocks base method.
func (m *MockAPIKeyService) FindAll(ctx context.Context) ([]model.APIKeyDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]model.APIKeyDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockAPIKeyServiceMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAPIKeyService)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockAPIKeyService) FindByID(ctx context.Context, id any) (model.APIKeyDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(model.APIKeyDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAPIKeyServiceMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAPIKeyService)(nil).FindByID), ctx, id)
}
