// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -mock_names=Service=MockGameService -destination=../../mock/mock_game_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go-fiber-api/internal/core/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGameService is a mock of Service interface.
type MockGameService struct {
	ctrl     *gomock.Controller
	recorder *MockGameServiceMockRecorder
	isgomock struct{}
}

// MockGameServiceMockRecorder is the mock recorder for MockGameService.
type MockGameServiceMockRecorder struct {
	mock *MockGameService
}

// NewMockGameService creates a new mock instance.
func NewMockGameService(ctrl *gomock.Controller) *MockGameService {
	mock := &MockGameService{ctrl: ctrl}
	mock.recorder = &MockGameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameService) EXPECT() *MockGameServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGameService) Create(arg0 context.Context, arg1 *model.UserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGameServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGameService)(nil).Create), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockGameService) DeleteByID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockGameServiceMockRecorder) DeleteByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockGameService)(nil).DeleteByID), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockGameService) FindAll(ctx context.Context) ([]model.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]model.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockGameServiceMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockGameService)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockGameService) FindByID(ctx context.Context, id string) (model.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(model.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockGameServiceMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockGameService)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockGameService) Update(arg0 context.Context, arg1 *model.UserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGameServiceMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGameService)(nil).Update), arg0, arg1)
}
